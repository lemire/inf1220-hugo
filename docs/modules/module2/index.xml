<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Module 2: Introduction au langage Java on INF 1220 - Introduction à la programmation</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/</link><description>Recent content in Module 2: Introduction au langage Java on INF 1220 - Introduction à la programmation</description><generator>Hugo</generator><language>fr</language><atom:link href="https://lemire.github.io/inf1220-hugo/docs/modules/module2/index.xml" rel="self" type="application/rss+xml"/><item><title>Préparation de l’espace de travail</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/preparation/</guid><description>&lt;h1 id="préparation-de-lespace-de-travail">
 Préparation de l&amp;rsquo;espace de travail
 &lt;a class="anchor" href="#pr%c3%a9paration-de-lespace-de-travail">#&lt;/a>
&lt;/h1>
&lt;p>Comme langage de support à l'introduction des concepts de programmation, nous utiliserons le langage Java. Tel que présenté dans l'introduction du cours, le langage Java est un langage interprété multi-plateforme où le code est pré-compilé dans un ensemble d'instructions intermédiaires (appelé Java bytecode), puis interprété sur chaque système d'exploitation à partir de la machine virtuelle Java. Celle-ci transforme alors le bytecode en instructions machine propre au système d'exploitation et aux processeurs spécifiques de l'ordinateur.&lt;/p></description></item><item><title>Langage de programmation orientée-objet</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/oriente/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/oriente/</guid><description>&lt;h1 id="langage-de-programmation-orientée-objet">
 Langage de programmation orientée-objet
 &lt;a class="anchor" href="#langage-de-programmation-orient%c3%a9e-objet">#&lt;/a>
&lt;/h1>
&lt;h2 id="un-premier-programme">
 Un premier programme
 &lt;a class="anchor" href="#un-premier-programme">#&lt;/a>
&lt;/h2>
&lt;p>
En Java, toutes parties d'un programme informatique doit donc être encapsulée dans une classe. Pour ce faire, il est donc nécessaire de créer un premier fichier de code source qui décrira une première classe et contiendra la description de la méthode "main", la méthode de démarrage (appelé parfois "bootstrap") du programme. Il est possible tout simplement d'utiliser le Bloc-Note avec Windows ou un autre éditeur de texte brut (&lt;strong>ce n'est pas le cas de Microsoft Word!&lt;/strong>), d'écrire les lignes de code nécessaire à la création de la classe et de ses fonctions et d'enregistrer ce texte sous l'extension .java (dans l'exemple ci-dessous dans un fichier Main.java). Voici un exemple d'une première classe qui imprimera dans l'invite de commande un texte de bienvenue.&lt;/p></description></item><item><title>Introduction aux types de base et à leurs opérateurs</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/typeoperateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/typeoperateur/</guid><description>&lt;h1 id="introduction-aux-types-de-base-et-à-leurs-opérateurs">
 Introduction aux types de base et à leurs opérateurs
 &lt;a class="anchor" href="#introduction-aux-types-de-base-et-%c3%a0-leurs-op%c3%a9rateurs">#&lt;/a>
&lt;/h1>
&lt;h2 id="mise-en-garde-pédagogique">
 Mise en garde pédagogique
 &lt;a class="anchor" href="#mise-en-garde-p%c3%a9dagogique">#&lt;/a>
&lt;/h2>
&lt;p>Si on prend un cours de Mandarin, on ne s'attend pas à comprendre tout le Mandarin lu ou écouté du premier coup ou même du deuxième. Il en va de même lorsqu'on étudie un langage de programmation, surtout s'il s'agit du premier langage de programmation appris. La première fois, la seconde fois, ou même la troisième fois que vous verrez un bout de code, il est parfaitement normal de ne pas le comprendre entièrement. C'est d'autant plus vrai que le langage Java a un syntaxe plutôt lourde avec beaucoup de mots réservés à la signification abstraite. Vous verrez beaucoup de mots comme "class", "public", "static", "void" dans ce cours. Si ça vous semble être du jargon, c'est parce que c'est exactement ce dont il s'agit. Monter un programme en Java n'est pas chose aisée, il faut comprendre que les "classes" vont dans des fichiers avec un nom correspondant à la classe, il faut comprendre que seule la méthode "public static void main(String[])" est exécutable, etc., etc. Il est impossible d'absorber tout ça en un jour, en une semaine ou même en quelques courtes semaines. Ça prend du temps avant de s'y retrouver.&lt;/p></description></item><item><title>Exercices sur les classes, les variables, les types et les opérateurs</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/exercices-2-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/exercices-2-1/</guid><description>&lt;h1 id="exercices-sur-les-classes-les-variables-les-types-et-les-opérateurs">
 Exercices sur les classes, les variables, les types et les opérateurs
 &lt;a class="anchor" href="#exercices-sur-les-classes-les-variables-les-types-et-les-op%c3%a9rateurs">#&lt;/a>
&lt;/h1>
&lt;p>Prenez en note chaque question. Tentez par vos propres moyens, mais avec l'aide de tout le matériel et de l'Internet, de résoudre le problème. Prévoyez jusqu'à 15 minutes de travail par question. Après avoir bien travaillé la question, consultez la réponse.&lt;/p>
&lt;p>N'allez pas trop vite. Il ne sert à rien de lire la question et d'immédiatement lire la réponse. Le but des exercices est de vous amener à travailler la matière. Si vous ne faites que regarder les solutions, vous n'apprenez pas grand chose. Oui, ça va plus vite, mais votre but ici n'est pas la rapidité.&lt;/p></description></item><item><title>Méthodes et constructeurs</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/methodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/methodes/</guid><description>&lt;h1 id="la-conception-de-méthodesfonctions-et-leur-appel">
 La conception de méthodes/fonctions et leur appel
 &lt;a class="anchor" href="#la-conception-de-m%c3%a9thodesfonctions-et-leur-appel">#&lt;/a>
&lt;/h1>
&lt;h2 id="les-méthodes">
 Les méthodes
 &lt;a class="anchor" href="#les-m%c3%a9thodes">#&lt;/a>
&lt;/h2>
&lt;p>Dans la plupart des langages de programmation modernes, il est possible de subdiviser le code en plusieurs sections appelées méthodes ou fonctions (le terme méthode est spécifique au langage Java, mais le terme fonction peut-être également utilisé). L'avantage est double, ces méthodes permettent une meilleure lecture du code et permet de généraliser et réutiliser des portions de code fréquent. De plus, en programmation orientée-objet, l'utilisation de méthodes est parfois appelée un passage de message. Ainsi, une classe peut offrir différentes méthodes à l'application qui peuvent être appelées en envoyant à celle-ci un message et des paramètres (ou non). De plus, la bibliothèque de code standard de Java, appelé &lt;em>Application programming interface&lt;/em> (API), fournit plusieurs classes utiles telles que des structures de données (ex. ArrayList, Hashmap), des types avancés (ex. les chaînes de caractères String ou StringBuffer), des outils de gestion de flux de données (ex. pour l'écriture et la lecture dans les fichiers (ex. FileReader, FileInputStream). Chacune des classes de l'API offre un ensemble de méthodes pouvant être appelées pour une tâche ou un traitement donné. Voici un exemple d'appel de méthode avec la classe String : &lt;/p></description></item><item><title>Exercices sur les classes et méthodes</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/exercices-2-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/exercices-2-2/</guid><description>&lt;h1 id="questionsréponses">
 Questions/Réponses
 &lt;a class="anchor" href="#questionsr%c3%a9ponses">#&lt;/a>
&lt;/h1>
&lt;p>Veuillez répondre mentalement ou sur papier à ces questions avant de regarder la réponse.&lt;/p>
&lt;p>Certains étudiants aiment utiliser une &lt;a href="https://cheatography.com/sschaub/cheat-sheets/java-fundamentals/">Java Fundamentals Cheat Sheet&lt;/a> (anglais) pour garder à l'esprit la syntaxe.&lt;/p>
&lt;h2 id="comment-faire-ces-exercices-">
 Comment faire ces exercices ?
 &lt;a class="anchor" href="#comment-faire-ces-exercices-">#&lt;/a>
&lt;/h2>
&lt;p>N'allez pas trop vite. Il ne sert à rien de lire la question et d'immédiatement lire la réponse. Le but des exercices est de vous amener à travailler la matière. Si vous ne faites que regarder les solutions, vous n'apprenez pas grand chose. &lt;/p></description></item><item><title>Recommandations</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/conseils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/conseils/</guid><description>&lt;h1 id="recommandations">
 Recommandations
 &lt;a class="anchor" href="#recommandations">#&lt;/a>
&lt;/h1>
&lt;p>Il est important d&amp;rsquo;écrire du code lisible et bien documenté. Il s&amp;rsquo;agit d&amp;rsquo;un compétence
nécessaire pour développer du logiciel en pratique.&lt;/p>
&lt;h2 id="importance-de-la-lisibilité-du-code-en-java">
 Importance de la lisibilité du code en Java
 &lt;a class="anchor" href="#importance-de-la-lisibilit%c3%a9-du-code-en-java">#&lt;/a>
&lt;/h2>
&lt;p>La lisibilité du code est essentielle en Java pour faciliter la maintenance et la collaboration.
Un code lisible réduit les erreurs et permet à d&amp;rsquo;autres développeurs (ou à vous-même dans le
futur) de comprendre rapidement l&amp;rsquo;intention du programme. Pour y parvenir, il faut adopter
des conventions de nommage claires et commenter judicieusement. Les normes de codage,
comme celles définies par Oracle ou Google, standardisent la structure du code, rendant
les projets cohérents. Une variable bien nommée, comme &lt;code>nombreEtudiants&lt;/code> au lieu de &lt;code>n&lt;/code>,
et des commentaires explicatifs améliorent la compréhension.&lt;/p></description></item><item><title>Travail noté 2</title><link>https://lemire.github.io/inf1220-hugo/docs/modules/module2/travail-note-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lemire.github.io/inf1220-hugo/docs/modules/module2/travail-note-2/</guid><description>&lt;h1 id="travail-noté-2---les-types-opérateurs-et-méthodes">
 Travail noté 2 - Les types, opérateurs et méthodes
 &lt;a class="anchor" href="#travail-not%c3%a9-2---les-types-op%c3%a9rateurs-et-m%c3%a9thodes">#&lt;/a>
&lt;/h1>
&lt;p>Avant de commencer le travail noté, il est essentiel de maîtriser la matière en ayant complété toutes les lectures et exercices préparatoires, et de poser des questions si nécessaire. L’utilisation du robot conversationnel du cours est autorisée pour les travaux notés, mais les réponses et analyses doivent être personnelles. Les travaux doivent être soumis avant la date de fin de cours, inscrite dans le portail étudiant, sans possibilité de report, sauf en cas de situation exceptionnelle validée par l’Université. Toute soumission tardive peut entraîner une note de zéro ou un « incomplet », même si l’examen a lieu plus tard.&lt;/p></description></item></channel></rss>